#version 450

layout (local_size_x = 2, local_size_y = 2) in;
layout (rgba8, binding = 0) uniform readonly image2D image;
layout (r8, binding = 1) uniform writeonly image2D y;
layout (r8, binding = 2) uniform writeonly image2D cb;
layout (r8, binding = 3) uniform writeonly image2D cr;

const mat3 mat_rgb709_to_ycbcr = mat3(
    0.2215,  0.7154,  0.0721,
    -0.1145, -0.3855,  0.5000,
    0.5016, -0.4556, -0.0459
);

float rgb709_unlinear(float s) {
    return mix(4.5*s, 1.099*pow(s, 1.0/2.2) - 0.099, step(0.018, s));
}

vec3 unlinearize_rgb709_from_rgb(vec3 color) {
    return vec3(
        rgb709_unlinear(color.r),
        rgb709_unlinear(color.g),
        rgb709_unlinear(color.b)
    );
}

vec3 ycbcr(vec3 rgb) {
    vec3 yuv = transpose(mat_rgb709_to_ycbcr) * unlinearize_rgb709_from_rgb(rgb);
    vec3 quantized = vec3(
        (219.0*yuv.x)/256.0,
        (224.0*yuv.y + 128.0)/256.0,
        (224.0*yuv.z + 128.0)/256.0
    );
    return quantized;
}

void main() {
    ivec2 cbcrXY = ivec2(gl_GlobalInvocationID.xy);
    ivec2 xy = cbcrXY * 2;

    vec4 rgb_00 = imageLoad(image, xy);
    vec4 rgb_10 = imageLoad(image, xy + ivec2(1, 0));
    vec4 rgb_01 = imageLoad(image, xy + ivec2(0, 1));
    vec4 rgb_11 = imageLoad(image, xy + ivec2(1, 1));

    vec3 ycbcr_00 = ycbcr(rgb_00.rgb);
    vec3 ycbcr_10 = ycbcr(rgb_10.rgb);
    vec3 ycbcr_01 = ycbcr(rgb_01.rgb);
    vec3 ycbcr_11 = ycbcr(rgb_11.rgb);

    imageStore(y, xy              , vec4(ycbcr_00.x));
    imageStore(y, xy + ivec2(1, 0), vec4(ycbcr_10.x));
    imageStore(y, xy + ivec2(0, 1), vec4(ycbcr_01.x));
    imageStore(y, xy + ivec2(1, 1), vec4(ycbcr_11.x));

    float Cb = (ycbcr_00.y + ycbcr_10.y + ycbcr_01.y + ycbcr_11.y) / 4;
    float Cy = (ycbcr_00.z + ycbcr_10.z + ycbcr_01.z + ycbcr_11.z) / 4;
    imageStore(cb, ivec2(cbcrXY), vec4(Cb));
    imageStore(cr, ivec2(cbcrXY), vec4(Cy));
}